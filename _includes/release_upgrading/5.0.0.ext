        <section>
            <header><h3>Neba core and Neba Spring</h3></header>
            <p>
                NEBA 5.0.0 now offers a choice between just using the flyweight neba core or using the neba core along with the neba spring integration.
                If you are heavily relying on <a href="/documentation.html#spring_mvc">NEBA's Spring MVC integration</a>, you might want to continue using NEBA with Spring.
                In this case, simply <a href="/download.html#spring-integration">use the NEBA delivery package containing the Spring integration</a> and continue using NEBA with minor adaptations.
                Most prominently, the annotation @ResourceModel is no longer annotated with @Component. This means that in order to detect your @ResourceModel classes as Spring beans, you must annotate
                them with @Component and @Scope (see <a href="#listing:spring-based-model">A Spring-Bean based Resource Model" below</a>).
            </p>
            <p>
                If you are exclusively using resource models or only a few MVC features, consider switching to just using NEBA core. In this case, Spring @Service beans should become OSGi Services (e.g. using the <code>@Component</code> annotation) and
                resource models should use @Inject and, if necessary, <a href="/documentation.html#the_filter_annotation">the @Filter annotation</a> to wire these service dependencies.
            </p>
            <div class="up-to-two-columns">
                <section>
                    <header><h4>A Spring-Bean based Resource Model</h4></header>
<figure class="listing" id="listing:spring-based-model">
{% highlight java %}
import io.neba.api.annotations.ResourceModel;
import org.springframework.stereotype.Component;
import org.springframework.context.annotation.Scope;
import org.eclipse.gemini.blueprint.extensions.annotation.ServiceReference;

@Component //Required for Spring's class path scanning
@Scope("prototype") //Resource models must have prototype scope
@ResourceModel(types = "myproject/components/myComponent")
public class MyModel {
    @ServiceReference(filter="(some=filter)") //Provided by the gemini-blueprint-extensions bundle.
    private Service service;
}
{% endhighlight %}
<figcaption>A Spring-based Resource Model</figcaption>
</figure>

                    <p>The bundle containing this model must of course contain a <a href="/documentation.html#spring">Blueprint application context definition</a> to create the respective Spring Application Context.</p>

                </section>
                <section>
                    <header><h4>A Resource model without Spring</h4></header>

<figure class="listing" id="listing:sample-content">
{% highlight java %}
package my.bundle.namespace;

import io.neba.api.annotations.ResourceModel;

@ResourceModel(types = "myproject/components/myComponent")
public class MyModel {
    @Inject // @Inject is for OSGi Services
    @Filter("(some=filter)")
    private Service service;
}
{% endhighlight %}
<figcaption>A NEBA resource model without Spring</figcaption>
</figure>
                    <p>Here, the package <code>my.bundle.namespace</code> would need to be <a href="/documentation.html#add_neba_packages_header">in the Neba-Packages bundle header</a>.</p>

                </section>
            </div>
        </section>
        <section>
            <header><h3>Upgrade to Spring 5</h3></header>
            <p>
                NEBA 5.0.0 ships with Spring 5.0.x. If you choose to continue using Spring, you must update the <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.servicemix.bundles%22%20AND%20a%3Aorg.apache.servicemix.bundles.spring-*%20AND%20v%3A%225.0.7.RELEASE_1%22">Spring dependencies</a> accordingly.
            </p>
        </section>
        <section>
            <header><h3>Remove usages of @PreMapping, change usages of @PostMapping to @AfterMapping</h3></header>
            <p>
                In 5.0.0, the <code>@PreMapping</code> annotation has been removed. If you require this rare use case, consider introducing a <a href="/documentation.html#custom_annotations">Custom annotation</a> instead.
                The <code>@PostMapping</code> annotation has been renamed to <a href="/apidocs/neba-api/io/neba/api/annotations/AfterMapping.html">@AfterMapping</a>, usages must be updated accordingly.
            </p>
        </section>
        <section>
            <header><h3>io.neba.api.resourcemodels.Optional is removed and replaced with io.neba.api.resourcemodels.Lazy</h3></header>
            <p>
                In 5.0.0, NEBA's deprecated <code>Optional</code> interface for lazy-loading 1:1 relationships has been removed. Users of NEBA's <code>Optional</code> interface must use <a href="/documentation.html#the_lazy_interface">Lazy</a> instead.
            </p>
        </section>
        <section>
            <header><h3>Package change for Service Provider Interfaces such as AnnotatedFieldMapper or ResourceModelPostProcessor</h3></header>
            <p>
                NEBA extension points are now situated in the dedicated <a href="/apidocs/neba-api/io/neba/api/spi/package-summary.html">io.neba.api.spi package</a>.
            </p>
        </section>
        <section>
            <header><h3>Package change for Spring-specific @ResourceParam annotation</h3></header>
            <p>
                The @ResourceParam annotation has been moved to the neba-spring bundle and has thus been moved from <code>io.neba.api.annotations</code> to the <code>io.neba.spring.api</code> package.
            </p>
        </section>
